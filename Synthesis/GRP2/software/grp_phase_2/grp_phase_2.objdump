
grp_phase_2.elf:     file format elf32-littlenios2
grp_phase_2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00000ba8 memsz 0x00000ba8 flags r-x
    LOAD off    0x00001bc8 vaddr 0x00008bc8 paddr 0x000091b4 align 2**12
         filesz 0x000005ec memsz 0x000005ec flags rw-
    LOAD off    0x000027a0 vaddr 0x000097a0 paddr 0x000097a0 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  000021b4  2**0
                  CONTENTS
  2 .text         00000b98  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000010  00008bb8  00008bb8  00001bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000005ec  00008bc8  000091b4  00001bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  000097a0  000097a0  000027a0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000097b0  000097b0  000021b4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000021b4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002b0  00000000  00000000  000021d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00003b92  00000000  00000000  00002488  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000123b  00000000  00000000  0000601a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000012b0  00000000  00000000  00007255  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000440  00000000  00000000  00008508  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000d9c  00000000  00000000  00008948  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000039d  00000000  00000000  000096e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00009a84  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000080  00000000  00000000  00009ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000ac2a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0000ac2d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000ac39  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000ac3a  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  0000ac3b  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  0000ac3f  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  0000ac43  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000004  00000000  00000000  0000ac47  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002b  00000000  00000000  0000ac4b  2**0
                  CONTENTS, READONLY
 26 .jdi          000039e7  00000000  00000000  0000ac76  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0008b719  00000000  00000000  0000e65d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
00008bb8 l    d  .rodata	00000000 .rodata
00008bc8 l    d  .rwdata	00000000 .rwdata
000097a0 l    d  .bss	00000000 .bss
000097b0 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../grp_phase_2_bsp//obj/HAL/src/crt0.o
00008068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 alt_load.c
00008370 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_close.c
00008514 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00008668 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00008d70 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000845c g     F .text	00000060 alt_main
000091b4 g       *ABS*	00000000 __flash_rwdata_start
000087ec g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000001c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
000097ac g     O .bss	00000004 errno
000097a4 g     O .bss	00000004 alt_argv
00011194 g       *ABS*	00000000 _gp
00008bf0 g     O .rwdata	00000180 alt_fd_list
00008bb8 g       *ABS*	00000000 __DTOR_END__
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00008810 g     F .text	00000090 alt_icache_flush
000091a4 g     O .rwdata	00000004 alt_max_fd
000091ac g     O .rwdata	00000004 _global_impure_ptr
000097b0 g       *ABS*	00000000 __bss_end
00008bc8 g     O .rwdata	00000028 alt_dev_null
00008620 g     F .text	00000048 alt_dcache_flush_all
000091b4 g       *ABS*	00000000 __ram_rwdata_end
0000919c g     O .rwdata	00000008 alt_dev_list
00008bc8 g       *ABS*	00000000 __ram_rodata_end
000097b0 g       *ABS*	00000000 end
00008bb8 g       *ABS*	00000000 __CTOR_LIST__
0000d000 g       *ABS*	00000000 __alt_stack_pointer
00008a04 g     F .text	00000180 __call_exitprocs
00008020 g     F .text	0000004c _start
000084f4 g     F .text	00000020 alt_sys_init
000088ec g     F .text	00000118 __register_exitproc
00008bc8 g       *ABS*	00000000 __ram_rwdata_start
00008bb8 g       *ABS*	00000000 __ram_rodata_start
000097b0 g       *ABS*	00000000 __alt_stack_base
0000806c g     F .text	0000010c single_digit
000097a0 g       *ABS*	00000000 __bss_start
00008178 g     F .text	000001f8 main
000097a8 g     O .bss	00000004 alt_envp
000091a8 g     O .rwdata	00000004 alt_errno
00008bb8 g       *ABS*	00000000 __CTOR_END__
00008bb8 g       *ABS*	00000000 __flash_rodata_start
00008bb8 g       *ABS*	00000000 __DTOR_LIST__
000084bc g     F .text	00000038 alt_irq_init
00008788 g     F .text	00000064 alt_release_fd
000088a0 g     F .text	00000014 atexit
000091b0 g     O .rwdata	00000004 _impure_ptr
000097a0 g     O .bss	00000004 alt_argc
000086f4 g     F .text	00000060 _do_dtors
00009194 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
000091b4 g       *ABS*	00000000 _edata
000097b0 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
000088b4 g     F .text	00000038 exit
0000d000 g       *ABS*	00000000 __alt_data_end
00008b84 g     F .text	00000034 _exit
00008754 g     F .text	00000034 alt_icache_flush_all
00008694 g     F .text	00000060 _do_ctors
00008550 g     F .text	000000d0 close
000083d8 g     F .text	00000084 alt_load



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00880014 	movui	r2,8192
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <_gp+0xffff6e70>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08600814 	ori	at,at,32800
    jmp r1
    8018:	0800683a 	jmp	at
    801c:	00000000 	call	0 <__reset-0x8000>

Disassembly of section .text:

00008020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
    8020:	00880014 	movui	r2,8192
#endif

0:
    initd 0(r2)
    8024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    8028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
    802c:	00bffd16 	blt	zero,r2,8024 <_gp+0xffff6e90>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8030:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8034:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    8038:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    803c:	d6846514 	ori	gp,gp,4500
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8040:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8044:	10a5e814 	ori	r2,r2,38816

    movhi r3, %hi(__bss_end)
    8048:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    804c:	18e5ec14 	ori	r3,r3,38832

    beq r2, r3, 1f
    8050:	10c00326 	beq	r2,r3,8060 <_start+0x40>

0:
    stw zero, (r2)
    8054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    805c:	10fffd36 	bltu	r2,r3,8054 <_gp+0xffff6ec0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8060:	00083d80 	call	83d8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8064:	000845c0 	call	845c <alt_main>

00008068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8068:	003fff06 	br	8068 <_gp+0xffff6ed4>

0000806c <single_digit>:
typedef union Data {
	int data;
	char byte[4];
} Data;

char single_digit(int number){
    806c:	defffe04 	addi	sp,sp,-8
    8070:	df000115 	stw	fp,4(sp)
    8074:	df000104 	addi	fp,sp,4
    8078:	e13fff15 	stw	r4,-4(fp)
	switch(number){
    807c:	e0bfff17 	ldw	r2,-4(fp)
    8080:	10800428 	cmpgeui	r2,r2,16
    8084:	1000371e 	bne	r2,zero,8164 <single_digit+0xf8>
    8088:	e0bfff17 	ldw	r2,-4(fp)
    808c:	100690ba 	slli	r3,r2,2
    8090:	00800074 	movhi	r2,1
    8094:	10a02904 	addi	r2,r2,-32604
    8098:	1885883a 	add	r2,r3,r2
    809c:	10800017 	ldw	r2,0(r2)
    80a0:	1000683a 	jmp	r2
    80a4:	000080e4 	muli	zero,zero,515
    80a8:	000080ec 	andhi	zero,zero,515
    80ac:	000080f4 	movhi	zero,515
    80b0:	000080fc 	xorhi	zero,zero,515
    80b4:	00008104 	movi	zero,516
    80b8:	0000810c 	andi	zero,zero,516
    80bc:	00008114 	movui	zero,516
    80c0:	0000811c 	xori	zero,zero,516
    80c4:	00008124 	muli	zero,zero,516
    80c8:	0000812c 	andhi	zero,zero,516
    80cc:	00008134 	movhi	zero,516
    80d0:	0000813c 	xorhi	zero,zero,516
    80d4:	00008144 	movi	zero,517
    80d8:	0000814c 	andi	zero,zero,517
    80dc:	00008154 	movui	zero,517
    80e0:	0000815c 	xori	zero,zero,517
	case 0:
		return SEG0;
    80e4:	00bff004 	movi	r2,-64
    80e8:	00001f06 	br	8168 <single_digit+0xfc>
	case 1:
		return SEG1;
    80ec:	00bffe44 	movi	r2,-7
    80f0:	00001d06 	br	8168 <single_digit+0xfc>
	case 2:
		return SEG2;
    80f4:	00bfe904 	movi	r2,-92
    80f8:	00001b06 	br	8168 <single_digit+0xfc>
	case 3:
		return SEG3;
    80fc:	00bfec04 	movi	r2,-80
    8100:	00001906 	br	8168 <single_digit+0xfc>
	case 4:
		return SEG4;
    8104:	00bfe644 	movi	r2,-103
    8108:	00001706 	br	8168 <single_digit+0xfc>
	case 5:
		return SEG5;
    810c:	00bfe484 	movi	r2,-110
    8110:	00001506 	br	8168 <single_digit+0xfc>
	case 6:
		return SEG6;
    8114:	00bfe084 	movi	r2,-126
    8118:	00001306 	br	8168 <single_digit+0xfc>
	case 7:
		return SEG7;
    811c:	00bffe04 	movi	r2,-8
    8120:	00001106 	br	8168 <single_digit+0xfc>
	case 8:
		return SEG8;
    8124:	00bfe004 	movi	r2,-128
    8128:	00000f06 	br	8168 <single_digit+0xfc>
	case 9:
		return SEG9;
    812c:	00bfe404 	movi	r2,-112
    8130:	00000d06 	br	8168 <single_digit+0xfc>
	case 0xa:
		return SEGA;
    8134:	00bfe204 	movi	r2,-120
    8138:	00000b06 	br	8168 <single_digit+0xfc>
	case 0xb:
		return SEGB;
    813c:	00bfe0c4 	movi	r2,-125
    8140:	00000906 	br	8168 <single_digit+0xfc>
	case 0xc:
		return SEGC;
    8144:	00bff184 	movi	r2,-58
    8148:	00000706 	br	8168 <single_digit+0xfc>
	case 0xd:
		return SEGD;
    814c:	00bfe844 	movi	r2,-95
    8150:	00000506 	br	8168 <single_digit+0xfc>
	case 0xe:
		return SEGE;
    8154:	00bfe184 	movi	r2,-122
    8158:	00000306 	br	8168 <single_digit+0xfc>
	case 0xf:
		return SEGF;
    815c:	00bfe384 	movi	r2,-114
    8160:	00000106 	br	8168 <single_digit+0xfc>
	default:
		return SEGBLANK;
    8164:	00bfffc4 	movi	r2,-1
	}
}
    8168:	e037883a 	mov	sp,fp
    816c:	df000017 	ldw	fp,0(sp)
    8170:	dec00104 	addi	sp,sp,4
    8174:	f800283a 	ret

00008178 <main>:

int main(void){
    8178:	defff404 	addi	sp,sp,-48
    817c:	dfc00b15 	stw	ra,44(sp)
    8180:	df000a15 	stw	fp,40(sp)
    8184:	df000a04 	addi	fp,sp,40
	// in
	char ccd = 0;
    8188:	e03ff705 	stb	zero,-36(fp)
	char pcd = 0;
    818c:	e03ff745 	stb	zero,-35(fp)
	int sw = 0;
    8190:	e03ff815 	stw	zero,-32(fp)
	int key = 0;
    8194:	e03ff915 	stw	zero,-28(fp)
	char recv_addr = 0;
    8198:	e03ffa05 	stb	zero,-24(fp)
	Data recv_data;
	recv_data.data = 0;
    819c:	e03ffc15 	stw	zero,-16(fp)

	// out
	char send_addr = 0;
    81a0:	e03ffa45 	stb	zero,-23(fp)
	Data send_data;
	char hex[6] = {0};
    81a4:	e03ffe15 	stw	zero,-8(fp)
    81a8:	e03fff0d 	sth	zero,-4(fp)
	int ledr = 0;
    81ac:	e03ffb15 	stw	zero,-20(fp)

	send_data.data = 0;
    81b0:	e03ffd15 	stw	zero,-12(fp)

	// while loop
	while(1){
		// read ccd and pcd
		ccd = IORD_ALTERA_AVALON_PIO_DATA(CCD_BASE);
    81b4:	00800074 	movhi	r2,1
    81b8:	10844404 	addi	r2,r2,4368
    81bc:	10800037 	ldwio	r2,0(r2)
    81c0:	e0bff705 	stb	r2,-36(fp)
		pcd = IORD_ALTERA_AVALON_PIO_DATA(PCD_BASE);
    81c4:	00800074 	movhi	r2,1
    81c8:	10844004 	addi	r2,r2,4352
    81cc:	10800037 	ldwio	r2,0(r2)
    81d0:	e0bff745 	stb	r2,-35(fp)
		sw = IORD_ALTERA_AVALON_PIO_DATA(SW_BASE);
    81d4:	00800074 	movhi	r2,1
    81d8:	10845c04 	addi	r2,r2,4464
    81dc:	10800037 	ldwio	r2,0(r2)
    81e0:	e0bff815 	stw	r2,-32(fp)
		key = IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE);
    81e4:	00800074 	movhi	r2,1
    81e8:	10846004 	addi	r2,r2,4480
    81ec:	10800037 	ldwio	r2,0(r2)
    81f0:	e0bff915 	stw	r2,-28(fp)
		recv_addr = IORD_ALTERA_AVALON_PIO_DATA(RECV_ADDR_BASE);
    81f4:	00800074 	movhi	r2,1
    81f8:	10847404 	addi	r2,r2,4560
    81fc:	10800037 	ldwio	r2,0(r2)
    8200:	e0bffa05 	stb	r2,-24(fp)
		recv_data.data = IORD_ALTERA_AVALON_PIO_DATA(RECV_DATA_BASE);
    8204:	00800074 	movhi	r2,1
    8208:	10847c04 	addi	r2,r2,4592
    820c:	10800037 	ldwio	r2,0(r2)
    8210:	e0bffc15 	stw	r2,-16(fp)

		// do stuff
		for (int i = 0; i < 4; i++){
    8214:	e03ff615 	stw	zero,-40(fp)
    8218:	00001106 	br	8260 <main+0xe8>
			hex[i] = single_digit((int) recv_data.byte[i]);
    821c:	e0fffc04 	addi	r3,fp,-16
    8220:	e0bff617 	ldw	r2,-40(fp)
    8224:	1885883a 	add	r2,r3,r2
    8228:	10800003 	ldbu	r2,0(r2)
    822c:	10803fcc 	andi	r2,r2,255
    8230:	1080201c 	xori	r2,r2,128
    8234:	10bfe004 	addi	r2,r2,-128
    8238:	1009883a 	mov	r4,r2
    823c:	000806c0 	call	806c <single_digit>
    8240:	1009883a 	mov	r4,r2
    8244:	e0fffe04 	addi	r3,fp,-8
    8248:	e0bff617 	ldw	r2,-40(fp)
    824c:	1885883a 	add	r2,r3,r2
    8250:	11000005 	stb	r4,0(r2)
		key = IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE);
		recv_addr = IORD_ALTERA_AVALON_PIO_DATA(RECV_ADDR_BASE);
		recv_data.data = IORD_ALTERA_AVALON_PIO_DATA(RECV_DATA_BASE);

		// do stuff
		for (int i = 0; i < 4; i++){
    8254:	e0bff617 	ldw	r2,-40(fp)
    8258:	10800044 	addi	r2,r2,1
    825c:	e0bff615 	stw	r2,-40(fp)
    8260:	e0bff617 	ldw	r2,-40(fp)
    8264:	10800110 	cmplti	r2,r2,4
    8268:	103fec1e 	bne	r2,zero,821c <_gp+0xffff7088>
			hex[i] = single_digit((int) recv_data.byte[i]);
		}

		hex[4] = single_digit((int) ccd);
    826c:	e0bff707 	ldb	r2,-36(fp)
    8270:	1009883a 	mov	r4,r2
    8274:	000806c0 	call	806c <single_digit>
    8278:	e0bfff05 	stb	r2,-4(fp)
		hex[5] = single_digit((int) pcd);
    827c:	e0bff747 	ldb	r2,-35(fp)
    8280:	1009883a 	mov	r4,r2
    8284:	000806c0 	call	806c <single_digit>
    8288:	e0bfff45 	stb	r2,-3(fp)

		ledr = recv_data.data;
    828c:	e0bffc17 	ldw	r2,-16(fp)
    8290:	e0bffb15 	stw	r2,-20(fp)

		// outputs
		IOWR_ALTERA_AVALON_PIO_DATA(HEX_0_BASE, hex[0]);
    8294:	e0bffe03 	ldbu	r2,-8(fp)
    8298:	10c03fcc 	andi	r3,r2,255
    829c:	18c0201c 	xori	r3,r3,128
    82a0:	18ffe004 	addi	r3,r3,-128
    82a4:	00800074 	movhi	r2,1
    82a8:	10846c04 	addi	r2,r2,4528
    82ac:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX_1_BASE, hex[1]);
    82b0:	e0bffe43 	ldbu	r2,-7(fp)
    82b4:	10c03fcc 	andi	r3,r2,255
    82b8:	18c0201c 	xori	r3,r3,128
    82bc:	18ffe004 	addi	r3,r3,-128
    82c0:	00800074 	movhi	r2,1
    82c4:	10846804 	addi	r2,r2,4512
    82c8:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX_2_BASE, hex[2]);
    82cc:	e0bffe83 	ldbu	r2,-6(fp)
    82d0:	10c03fcc 	andi	r3,r2,255
    82d4:	18c0201c 	xori	r3,r3,128
    82d8:	18ffe004 	addi	r3,r3,-128
    82dc:	00800074 	movhi	r2,1
    82e0:	10844c04 	addi	r2,r2,4400
    82e4:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX_3_BASE, hex[3]);
    82e8:	e0bffec3 	ldbu	r2,-5(fp)
    82ec:	10c03fcc 	andi	r3,r2,255
    82f0:	18c0201c 	xori	r3,r3,128
    82f4:	18ffe004 	addi	r3,r3,-128
    82f8:	00800074 	movhi	r2,1
    82fc:	10845004 	addi	r2,r2,4416
    8300:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX_4_BASE, hex[4]);
    8304:	e0bfff03 	ldbu	r2,-4(fp)
    8308:	10c03fcc 	andi	r3,r2,255
    830c:	18c0201c 	xori	r3,r3,128
    8310:	18ffe004 	addi	r3,r3,-128
    8314:	00800074 	movhi	r2,1
    8318:	10845404 	addi	r2,r2,4432
    831c:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX_5_BASE, hex[5]);
    8320:	e0bfff43 	ldbu	r2,-3(fp)
    8324:	10c03fcc 	andi	r3,r2,255
    8328:	18c0201c 	xori	r3,r3,128
    832c:	18ffe004 	addi	r3,r3,-128
    8330:	00800074 	movhi	r2,1
    8334:	10845804 	addi	r2,r2,4448
    8338:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, ledr);
    833c:	00800074 	movhi	r2,1
    8340:	10846404 	addi	r2,r2,4496
    8344:	e0fffb17 	ldw	r3,-20(fp)
    8348:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(SEND_ADDR_BASE, send_addr);
    834c:	e0fffa47 	ldb	r3,-23(fp)
    8350:	00800074 	movhi	r2,1
    8354:	10847804 	addi	r2,r2,4576
    8358:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(SEND_DATA_BASE, send_data.data);
    835c:	e0fffd17 	ldw	r3,-12(fp)
    8360:	00800074 	movhi	r2,1
    8364:	10847004 	addi	r2,r2,4544
    8368:	10c00035 	stwio	r3,0(r2)
	}
    836c:	003f9106 	br	81b4 <_gp+0xffff7020>

00008370 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    8370:	defffc04 	addi	sp,sp,-16
    8374:	df000315 	stw	fp,12(sp)
    8378:	df000304 	addi	fp,sp,12
    837c:	e13ffd15 	stw	r4,-12(fp)
    8380:	e17ffe15 	stw	r5,-8(fp)
    8384:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    8388:	e0fffe17 	ldw	r3,-8(fp)
    838c:	e0bffd17 	ldw	r2,-12(fp)
    8390:	18800c26 	beq	r3,r2,83c4 <alt_load_section+0x54>
  {
    while( to != end )
    8394:	00000806 	br	83b8 <alt_load_section+0x48>
    {
      *to++ = *from++;
    8398:	e0bffe17 	ldw	r2,-8(fp)
    839c:	10c00104 	addi	r3,r2,4
    83a0:	e0fffe15 	stw	r3,-8(fp)
    83a4:	e0fffd17 	ldw	r3,-12(fp)
    83a8:	19000104 	addi	r4,r3,4
    83ac:	e13ffd15 	stw	r4,-12(fp)
    83b0:	18c00017 	ldw	r3,0(r3)
    83b4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    83b8:	e0fffe17 	ldw	r3,-8(fp)
    83bc:	e0bfff17 	ldw	r2,-4(fp)
    83c0:	18bff51e 	bne	r3,r2,8398 <_gp+0xffff7204>
    {
      *to++ = *from++;
    }
  }
}
    83c4:	0001883a 	nop
    83c8:	e037883a 	mov	sp,fp
    83cc:	df000017 	ldw	fp,0(sp)
    83d0:	dec00104 	addi	sp,sp,4
    83d4:	f800283a 	ret

000083d8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    83d8:	defffe04 	addi	sp,sp,-8
    83dc:	dfc00115 	stw	ra,4(sp)
    83e0:	df000015 	stw	fp,0(sp)
    83e4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    83e8:	01800074 	movhi	r6,1
    83ec:	31a46d04 	addi	r6,r6,-28236
    83f0:	01400074 	movhi	r5,1
    83f4:	2962f204 	addi	r5,r5,-29752
    83f8:	01000074 	movhi	r4,1
    83fc:	21246d04 	addi	r4,r4,-28236
    8400:	00083700 	call	8370 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    8404:	01800074 	movhi	r6,1
    8408:	31a00804 	addi	r6,r6,-32736
    840c:	01400074 	movhi	r5,1
    8410:	29600804 	addi	r5,r5,-32736
    8414:	01000074 	movhi	r4,1
    8418:	21200804 	addi	r4,r4,-32736
    841c:	00083700 	call	8370 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    8420:	01800074 	movhi	r6,1
    8424:	31a2f204 	addi	r6,r6,-29752
    8428:	01400074 	movhi	r5,1
    842c:	2962ee04 	addi	r5,r5,-29768
    8430:	01000074 	movhi	r4,1
    8434:	2122ee04 	addi	r4,r4,-29768
    8438:	00083700 	call	8370 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    843c:	00086200 	call	8620 <alt_dcache_flush_all>
  alt_icache_flush_all();
    8440:	00087540 	call	8754 <alt_icache_flush_all>
}
    8444:	0001883a 	nop
    8448:	e037883a 	mov	sp,fp
    844c:	dfc00117 	ldw	ra,4(sp)
    8450:	df000017 	ldw	fp,0(sp)
    8454:	dec00204 	addi	sp,sp,8
    8458:	f800283a 	ret

0000845c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    845c:	defffd04 	addi	sp,sp,-12
    8460:	dfc00215 	stw	ra,8(sp)
    8464:	df000115 	stw	fp,4(sp)
    8468:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    846c:	0009883a 	mov	r4,zero
    8470:	00084bc0 	call	84bc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    8474:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8478:	00084f40 	call	84f4 <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    847c:	00086940 	call	8694 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    8480:	01000074 	movhi	r4,1
    8484:	2121bd04 	addi	r4,r4,-30988
    8488:	00088a00 	call	88a0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    848c:	d0a18317 	ldw	r2,-31220(gp)
    8490:	d0e18417 	ldw	r3,-31216(gp)
    8494:	d1218517 	ldw	r4,-31212(gp)
    8498:	200d883a 	mov	r6,r4
    849c:	180b883a 	mov	r5,r3
    84a0:	1009883a 	mov	r4,r2
    84a4:	00081780 	call	8178 <main>
    84a8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    84ac:	01000044 	movi	r4,1
    84b0:	00085500 	call	8550 <close>
  exit (result);
    84b4:	e13fff17 	ldw	r4,-4(fp)
    84b8:	00088b40 	call	88b4 <exit>

000084bc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    84bc:	defffd04 	addi	sp,sp,-12
    84c0:	dfc00215 	stw	ra,8(sp)
    84c4:	df000115 	stw	fp,4(sp)
    84c8:	df000104 	addi	fp,sp,4
    84cc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    84d0:	00087ec0 	call	87ec <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    84d4:	00800044 	movi	r2,1
    84d8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    84dc:	0001883a 	nop
    84e0:	e037883a 	mov	sp,fp
    84e4:	dfc00117 	ldw	ra,4(sp)
    84e8:	df000017 	ldw	fp,0(sp)
    84ec:	dec00204 	addi	sp,sp,8
    84f0:	f800283a 	ret

000084f4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    84f4:	deffff04 	addi	sp,sp,-4
    84f8:	df000015 	stw	fp,0(sp)
    84fc:	d839883a 	mov	fp,sp
}
    8500:	0001883a 	nop
    8504:	e037883a 	mov	sp,fp
    8508:	df000017 	ldw	fp,0(sp)
    850c:	dec00104 	addi	sp,sp,4
    8510:	f800283a 	ret

00008514 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8514:	defffe04 	addi	sp,sp,-8
    8518:	dfc00115 	stw	ra,4(sp)
    851c:	df000015 	stw	fp,0(sp)
    8520:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    8524:	d0a00517 	ldw	r2,-32748(gp)
    8528:	10000326 	beq	r2,zero,8538 <alt_get_errno+0x24>
    852c:	d0a00517 	ldw	r2,-32748(gp)
    8530:	103ee83a 	callr	r2
    8534:	00000106 	br	853c <alt_get_errno+0x28>
    8538:	d0a18604 	addi	r2,gp,-31208
}
    853c:	e037883a 	mov	sp,fp
    8540:	dfc00117 	ldw	ra,4(sp)
    8544:	df000017 	ldw	fp,0(sp)
    8548:	dec00204 	addi	sp,sp,8
    854c:	f800283a 	ret

00008550 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    8550:	defffb04 	addi	sp,sp,-20
    8554:	dfc00415 	stw	ra,16(sp)
    8558:	df000315 	stw	fp,12(sp)
    855c:	df000304 	addi	fp,sp,12
    8560:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    8564:	e0bfff17 	ldw	r2,-4(fp)
    8568:	10000616 	blt	r2,zero,8584 <close+0x34>
    856c:	e0bfff17 	ldw	r2,-4(fp)
    8570:	10c00324 	muli	r3,r2,12
    8574:	00800074 	movhi	r2,1
    8578:	10a2fc04 	addi	r2,r2,-29712
    857c:	1885883a 	add	r2,r3,r2
    8580:	00000106 	br	8588 <close+0x38>
    8584:	0005883a 	mov	r2,zero
    8588:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    858c:	e0bffd17 	ldw	r2,-12(fp)
    8590:	10001926 	beq	r2,zero,85f8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    8594:	e0bffd17 	ldw	r2,-12(fp)
    8598:	10800017 	ldw	r2,0(r2)
    859c:	10800417 	ldw	r2,16(r2)
    85a0:	10000626 	beq	r2,zero,85bc <close+0x6c>
    85a4:	e0bffd17 	ldw	r2,-12(fp)
    85a8:	10800017 	ldw	r2,0(r2)
    85ac:	10800417 	ldw	r2,16(r2)
    85b0:	e13ffd17 	ldw	r4,-12(fp)
    85b4:	103ee83a 	callr	r2
    85b8:	00000106 	br	85c0 <close+0x70>
    85bc:	0005883a 	mov	r2,zero
    85c0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    85c4:	e13fff17 	ldw	r4,-4(fp)
    85c8:	00087880 	call	8788 <alt_release_fd>
    if (rval < 0)
    85cc:	e0bffe17 	ldw	r2,-8(fp)
    85d0:	1000070e 	bge	r2,zero,85f0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    85d4:	00085140 	call	8514 <alt_get_errno>
    85d8:	1007883a 	mov	r3,r2
    85dc:	e0bffe17 	ldw	r2,-8(fp)
    85e0:	0085c83a 	sub	r2,zero,r2
    85e4:	18800015 	stw	r2,0(r3)
      return -1;
    85e8:	00bfffc4 	movi	r2,-1
    85ec:	00000706 	br	860c <close+0xbc>
    }
    return 0;
    85f0:	0005883a 	mov	r2,zero
    85f4:	00000506 	br	860c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    85f8:	00085140 	call	8514 <alt_get_errno>
    85fc:	1007883a 	mov	r3,r2
    8600:	00801444 	movi	r2,81
    8604:	18800015 	stw	r2,0(r3)
    return -1;
    8608:	00bfffc4 	movi	r2,-1
  }
}
    860c:	e037883a 	mov	sp,fp
    8610:	dfc00117 	ldw	ra,4(sp)
    8614:	df000017 	ldw	fp,0(sp)
    8618:	dec00204 	addi	sp,sp,8
    861c:	f800283a 	ret

00008620 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    8620:	defffe04 	addi	sp,sp,-8
    8624:	df000115 	stw	fp,4(sp)
    8628:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    862c:	e03fff15 	stw	zero,-4(fp)
    8630:	00000506 	br	8648 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    8634:	e0bfff17 	ldw	r2,-4(fp)
    8638:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    863c:	e0bfff17 	ldw	r2,-4(fp)
    8640:	10800804 	addi	r2,r2,32
    8644:	e0bfff15 	stw	r2,-4(fp)
    8648:	e0bfff17 	ldw	r2,-4(fp)
    864c:	10880030 	cmpltui	r2,r2,8192
    8650:	103ff81e 	bne	r2,zero,8634 <_gp+0xffff74a0>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    8654:	0001883a 	nop
    8658:	e037883a 	mov	sp,fp
    865c:	df000017 	ldw	fp,0(sp)
    8660:	dec00104 	addi	sp,sp,4
    8664:	f800283a 	ret

00008668 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    8668:	defffc04 	addi	sp,sp,-16
    866c:	df000315 	stw	fp,12(sp)
    8670:	df000304 	addi	fp,sp,12
    8674:	e13ffd15 	stw	r4,-12(fp)
    8678:	e17ffe15 	stw	r5,-8(fp)
    867c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    8680:	e0bfff17 	ldw	r2,-4(fp)
}
    8684:	e037883a 	mov	sp,fp
    8688:	df000017 	ldw	fp,0(sp)
    868c:	dec00104 	addi	sp,sp,4
    8690:	f800283a 	ret

00008694 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    8694:	defffd04 	addi	sp,sp,-12
    8698:	dfc00215 	stw	ra,8(sp)
    869c:	df000115 	stw	fp,4(sp)
    86a0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    86a4:	00800074 	movhi	r2,1
    86a8:	10a2ed04 	addi	r2,r2,-29772
    86ac:	e0bfff15 	stw	r2,-4(fp)
    86b0:	00000606 	br	86cc <_do_ctors+0x38>
        (*ctor) (); 
    86b4:	e0bfff17 	ldw	r2,-4(fp)
    86b8:	10800017 	ldw	r2,0(r2)
    86bc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    86c0:	e0bfff17 	ldw	r2,-4(fp)
    86c4:	10bfff04 	addi	r2,r2,-4
    86c8:	e0bfff15 	stw	r2,-4(fp)
    86cc:	e0ffff17 	ldw	r3,-4(fp)
    86d0:	00800074 	movhi	r2,1
    86d4:	10a2ee04 	addi	r2,r2,-29768
    86d8:	18bff62e 	bgeu	r3,r2,86b4 <_gp+0xffff7520>
        (*ctor) (); 
}
    86dc:	0001883a 	nop
    86e0:	e037883a 	mov	sp,fp
    86e4:	dfc00117 	ldw	ra,4(sp)
    86e8:	df000017 	ldw	fp,0(sp)
    86ec:	dec00204 	addi	sp,sp,8
    86f0:	f800283a 	ret

000086f4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    86f4:	defffd04 	addi	sp,sp,-12
    86f8:	dfc00215 	stw	ra,8(sp)
    86fc:	df000115 	stw	fp,4(sp)
    8700:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    8704:	00800074 	movhi	r2,1
    8708:	10a2ed04 	addi	r2,r2,-29772
    870c:	e0bfff15 	stw	r2,-4(fp)
    8710:	00000606 	br	872c <_do_dtors+0x38>
        (*dtor) (); 
    8714:	e0bfff17 	ldw	r2,-4(fp)
    8718:	10800017 	ldw	r2,0(r2)
    871c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    8720:	e0bfff17 	ldw	r2,-4(fp)
    8724:	10bfff04 	addi	r2,r2,-4
    8728:	e0bfff15 	stw	r2,-4(fp)
    872c:	e0ffff17 	ldw	r3,-4(fp)
    8730:	00800074 	movhi	r2,1
    8734:	10a2ee04 	addi	r2,r2,-29768
    8738:	18bff62e 	bgeu	r3,r2,8714 <_gp+0xffff7580>
        (*dtor) (); 
}
    873c:	0001883a 	nop
    8740:	e037883a 	mov	sp,fp
    8744:	dfc00117 	ldw	ra,4(sp)
    8748:	df000017 	ldw	fp,0(sp)
    874c:	dec00204 	addi	sp,sp,8
    8750:	f800283a 	ret

00008754 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    8754:	defffe04 	addi	sp,sp,-8
    8758:	dfc00115 	stw	ra,4(sp)
    875c:	df000015 	stw	fp,0(sp)
    8760:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    8764:	01480004 	movi	r5,8192
    8768:	0009883a 	mov	r4,zero
    876c:	00088100 	call	8810 <alt_icache_flush>
#endif
}
    8770:	0001883a 	nop
    8774:	e037883a 	mov	sp,fp
    8778:	dfc00117 	ldw	ra,4(sp)
    877c:	df000017 	ldw	fp,0(sp)
    8780:	dec00204 	addi	sp,sp,8
    8784:	f800283a 	ret

00008788 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    8788:	defffe04 	addi	sp,sp,-8
    878c:	df000115 	stw	fp,4(sp)
    8790:	df000104 	addi	fp,sp,4
    8794:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    8798:	e0bfff17 	ldw	r2,-4(fp)
    879c:	108000d0 	cmplti	r2,r2,3
    87a0:	10000d1e 	bne	r2,zero,87d8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    87a4:	00800074 	movhi	r2,1
    87a8:	10a2fc04 	addi	r2,r2,-29712
    87ac:	e0ffff17 	ldw	r3,-4(fp)
    87b0:	18c00324 	muli	r3,r3,12
    87b4:	10c5883a 	add	r2,r2,r3
    87b8:	10800204 	addi	r2,r2,8
    87bc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    87c0:	00800074 	movhi	r2,1
    87c4:	10a2fc04 	addi	r2,r2,-29712
    87c8:	e0ffff17 	ldw	r3,-4(fp)
    87cc:	18c00324 	muli	r3,r3,12
    87d0:	10c5883a 	add	r2,r2,r3
    87d4:	10000015 	stw	zero,0(r2)
  }
}
    87d8:	0001883a 	nop
    87dc:	e037883a 	mov	sp,fp
    87e0:	df000017 	ldw	fp,0(sp)
    87e4:	dec00104 	addi	sp,sp,4
    87e8:	f800283a 	ret

000087ec <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    87ec:	deffff04 	addi	sp,sp,-4
    87f0:	df000015 	stw	fp,0(sp)
    87f4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    87f8:	000170fa 	wrctl	ienable,zero
}
    87fc:	0001883a 	nop
    8800:	e037883a 	mov	sp,fp
    8804:	df000017 	ldw	fp,0(sp)
    8808:	dec00104 	addi	sp,sp,4
    880c:	f800283a 	ret

00008810 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    8810:	defffb04 	addi	sp,sp,-20
    8814:	df000415 	stw	fp,16(sp)
    8818:	df000404 	addi	fp,sp,16
    881c:	e13ffe15 	stw	r4,-8(fp)
    8820:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    8824:	e0bfff17 	ldw	r2,-4(fp)
    8828:	10880070 	cmpltui	r2,r2,8193
    882c:	1000021e 	bne	r2,zero,8838 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    8830:	00880004 	movi	r2,8192
    8834:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    8838:	e0fffe17 	ldw	r3,-8(fp)
    883c:	e0bfff17 	ldw	r2,-4(fp)
    8840:	1885883a 	add	r2,r3,r2
    8844:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    8848:	e0bffe17 	ldw	r2,-8(fp)
    884c:	e0bffc15 	stw	r2,-16(fp)
    8850:	00000506 	br	8868 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    8854:	e0bffc17 	ldw	r2,-16(fp)
    8858:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    885c:	e0bffc17 	ldw	r2,-16(fp)
    8860:	10800804 	addi	r2,r2,32
    8864:	e0bffc15 	stw	r2,-16(fp)
    8868:	e0fffc17 	ldw	r3,-16(fp)
    886c:	e0bffd17 	ldw	r2,-12(fp)
    8870:	18bff836 	bltu	r3,r2,8854 <_gp+0xffff76c0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    8874:	e0bffe17 	ldw	r2,-8(fp)
    8878:	108007cc 	andi	r2,r2,31
    887c:	10000226 	beq	r2,zero,8888 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    8880:	e0bffc17 	ldw	r2,-16(fp)
    8884:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    8888:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    888c:	0001883a 	nop
    8890:	e037883a 	mov	sp,fp
    8894:	df000017 	ldw	fp,0(sp)
    8898:	dec00104 	addi	sp,sp,4
    889c:	f800283a 	ret

000088a0 <atexit>:
    88a0:	200b883a 	mov	r5,r4
    88a4:	000f883a 	mov	r7,zero
    88a8:	000d883a 	mov	r6,zero
    88ac:	0009883a 	mov	r4,zero
    88b0:	00088ec1 	jmpi	88ec <__register_exitproc>

000088b4 <exit>:
    88b4:	defffe04 	addi	sp,sp,-8
    88b8:	000b883a 	mov	r5,zero
    88bc:	dc000015 	stw	r16,0(sp)
    88c0:	dfc00115 	stw	ra,4(sp)
    88c4:	2021883a 	mov	r16,r4
    88c8:	0008a040 	call	8a04 <__call_exitprocs>
    88cc:	00800074 	movhi	r2,1
    88d0:	10a46b04 	addi	r2,r2,-28244
    88d4:	11000017 	ldw	r4,0(r2)
    88d8:	20800f17 	ldw	r2,60(r4)
    88dc:	10000126 	beq	r2,zero,88e4 <exit+0x30>
    88e0:	103ee83a 	callr	r2
    88e4:	8009883a 	mov	r4,r16
    88e8:	0008b840 	call	8b84 <_exit>

000088ec <__register_exitproc>:
    88ec:	defffa04 	addi	sp,sp,-24
    88f0:	dc000315 	stw	r16,12(sp)
    88f4:	04000074 	movhi	r16,1
    88f8:	84246b04 	addi	r16,r16,-28244
    88fc:	80c00017 	ldw	r3,0(r16)
    8900:	dc400415 	stw	r17,16(sp)
    8904:	dfc00515 	stw	ra,20(sp)
    8908:	18805217 	ldw	r2,328(r3)
    890c:	2023883a 	mov	r17,r4
    8910:	10003726 	beq	r2,zero,89f0 <__register_exitproc+0x104>
    8914:	10c00117 	ldw	r3,4(r2)
    8918:	010007c4 	movi	r4,31
    891c:	20c00e16 	blt	r4,r3,8958 <__register_exitproc+0x6c>
    8920:	1a000044 	addi	r8,r3,1
    8924:	8800221e 	bne	r17,zero,89b0 <__register_exitproc+0xc4>
    8928:	18c00084 	addi	r3,r3,2
    892c:	18c7883a 	add	r3,r3,r3
    8930:	18c7883a 	add	r3,r3,r3
    8934:	12000115 	stw	r8,4(r2)
    8938:	10c7883a 	add	r3,r2,r3
    893c:	19400015 	stw	r5,0(r3)
    8940:	0005883a 	mov	r2,zero
    8944:	dfc00517 	ldw	ra,20(sp)
    8948:	dc400417 	ldw	r17,16(sp)
    894c:	dc000317 	ldw	r16,12(sp)
    8950:	dec00604 	addi	sp,sp,24
    8954:	f800283a 	ret
    8958:	00800034 	movhi	r2,0
    895c:	10800004 	addi	r2,r2,0
    8960:	10002626 	beq	r2,zero,89fc <__register_exitproc+0x110>
    8964:	01006404 	movi	r4,400
    8968:	d9400015 	stw	r5,0(sp)
    896c:	d9800115 	stw	r6,4(sp)
    8970:	d9c00215 	stw	r7,8(sp)
    8974:	00000000 	call	0 <__reset-0x8000>
    8978:	d9400017 	ldw	r5,0(sp)
    897c:	d9800117 	ldw	r6,4(sp)
    8980:	d9c00217 	ldw	r7,8(sp)
    8984:	10001d26 	beq	r2,zero,89fc <__register_exitproc+0x110>
    8988:	81000017 	ldw	r4,0(r16)
    898c:	10000115 	stw	zero,4(r2)
    8990:	02000044 	movi	r8,1
    8994:	22405217 	ldw	r9,328(r4)
    8998:	0007883a 	mov	r3,zero
    899c:	12400015 	stw	r9,0(r2)
    89a0:	20805215 	stw	r2,328(r4)
    89a4:	10006215 	stw	zero,392(r2)
    89a8:	10006315 	stw	zero,396(r2)
    89ac:	883fde26 	beq	r17,zero,8928 <_gp+0xffff7794>
    89b0:	18c9883a 	add	r4,r3,r3
    89b4:	2109883a 	add	r4,r4,r4
    89b8:	1109883a 	add	r4,r2,r4
    89bc:	21802215 	stw	r6,136(r4)
    89c0:	01800044 	movi	r6,1
    89c4:	12406217 	ldw	r9,392(r2)
    89c8:	30cc983a 	sll	r6,r6,r3
    89cc:	4992b03a 	or	r9,r9,r6
    89d0:	12406215 	stw	r9,392(r2)
    89d4:	21c04215 	stw	r7,264(r4)
    89d8:	01000084 	movi	r4,2
    89dc:	893fd21e 	bne	r17,r4,8928 <_gp+0xffff7794>
    89e0:	11006317 	ldw	r4,396(r2)
    89e4:	218cb03a 	or	r6,r4,r6
    89e8:	11806315 	stw	r6,396(r2)
    89ec:	003fce06 	br	8928 <_gp+0xffff7794>
    89f0:	18805304 	addi	r2,r3,332
    89f4:	18805215 	stw	r2,328(r3)
    89f8:	003fc606 	br	8914 <_gp+0xffff7780>
    89fc:	00bfffc4 	movi	r2,-1
    8a00:	003fd006 	br	8944 <_gp+0xffff77b0>

00008a04 <__call_exitprocs>:
    8a04:	defff504 	addi	sp,sp,-44
    8a08:	df000915 	stw	fp,36(sp)
    8a0c:	dd400615 	stw	r21,24(sp)
    8a10:	dc800315 	stw	r18,12(sp)
    8a14:	dfc00a15 	stw	ra,40(sp)
    8a18:	ddc00815 	stw	r23,32(sp)
    8a1c:	dd800715 	stw	r22,28(sp)
    8a20:	dd000515 	stw	r20,20(sp)
    8a24:	dcc00415 	stw	r19,16(sp)
    8a28:	dc400215 	stw	r17,8(sp)
    8a2c:	dc000115 	stw	r16,4(sp)
    8a30:	d9000015 	stw	r4,0(sp)
    8a34:	2839883a 	mov	fp,r5
    8a38:	04800044 	movi	r18,1
    8a3c:	057fffc4 	movi	r21,-1
    8a40:	00800074 	movhi	r2,1
    8a44:	10a46b04 	addi	r2,r2,-28244
    8a48:	12000017 	ldw	r8,0(r2)
    8a4c:	45005217 	ldw	r20,328(r8)
    8a50:	44c05204 	addi	r19,r8,328
    8a54:	a0001c26 	beq	r20,zero,8ac8 <__call_exitprocs+0xc4>
    8a58:	a0800117 	ldw	r2,4(r20)
    8a5c:	15ffffc4 	addi	r23,r2,-1
    8a60:	b8000d16 	blt	r23,zero,8a98 <__call_exitprocs+0x94>
    8a64:	14000044 	addi	r16,r2,1
    8a68:	8421883a 	add	r16,r16,r16
    8a6c:	8421883a 	add	r16,r16,r16
    8a70:	84402004 	addi	r17,r16,128
    8a74:	a463883a 	add	r17,r20,r17
    8a78:	a421883a 	add	r16,r20,r16
    8a7c:	e0001e26 	beq	fp,zero,8af8 <__call_exitprocs+0xf4>
    8a80:	80804017 	ldw	r2,256(r16)
    8a84:	e0801c26 	beq	fp,r2,8af8 <__call_exitprocs+0xf4>
    8a88:	bdffffc4 	addi	r23,r23,-1
    8a8c:	843fff04 	addi	r16,r16,-4
    8a90:	8c7fff04 	addi	r17,r17,-4
    8a94:	bd7ff91e 	bne	r23,r21,8a7c <_gp+0xffff78e8>
    8a98:	00800034 	movhi	r2,0
    8a9c:	10800004 	addi	r2,r2,0
    8aa0:	10000926 	beq	r2,zero,8ac8 <__call_exitprocs+0xc4>
    8aa4:	a0800117 	ldw	r2,4(r20)
    8aa8:	1000301e 	bne	r2,zero,8b6c <__call_exitprocs+0x168>
    8aac:	a0800017 	ldw	r2,0(r20)
    8ab0:	10003226 	beq	r2,zero,8b7c <__call_exitprocs+0x178>
    8ab4:	a009883a 	mov	r4,r20
    8ab8:	98800015 	stw	r2,0(r19)
    8abc:	00000000 	call	0 <__reset-0x8000>
    8ac0:	9d000017 	ldw	r20,0(r19)
    8ac4:	a03fe41e 	bne	r20,zero,8a58 <_gp+0xffff78c4>
    8ac8:	dfc00a17 	ldw	ra,40(sp)
    8acc:	df000917 	ldw	fp,36(sp)
    8ad0:	ddc00817 	ldw	r23,32(sp)
    8ad4:	dd800717 	ldw	r22,28(sp)
    8ad8:	dd400617 	ldw	r21,24(sp)
    8adc:	dd000517 	ldw	r20,20(sp)
    8ae0:	dcc00417 	ldw	r19,16(sp)
    8ae4:	dc800317 	ldw	r18,12(sp)
    8ae8:	dc400217 	ldw	r17,8(sp)
    8aec:	dc000117 	ldw	r16,4(sp)
    8af0:	dec00b04 	addi	sp,sp,44
    8af4:	f800283a 	ret
    8af8:	a0800117 	ldw	r2,4(r20)
    8afc:	80c00017 	ldw	r3,0(r16)
    8b00:	10bfffc4 	addi	r2,r2,-1
    8b04:	15c01426 	beq	r2,r23,8b58 <__call_exitprocs+0x154>
    8b08:	80000015 	stw	zero,0(r16)
    8b0c:	183fde26 	beq	r3,zero,8a88 <_gp+0xffff78f4>
    8b10:	95c8983a 	sll	r4,r18,r23
    8b14:	a0806217 	ldw	r2,392(r20)
    8b18:	a5800117 	ldw	r22,4(r20)
    8b1c:	2084703a 	and	r2,r4,r2
    8b20:	10000b26 	beq	r2,zero,8b50 <__call_exitprocs+0x14c>
    8b24:	a0806317 	ldw	r2,396(r20)
    8b28:	2088703a 	and	r4,r4,r2
    8b2c:	20000c1e 	bne	r4,zero,8b60 <__call_exitprocs+0x15c>
    8b30:	89400017 	ldw	r5,0(r17)
    8b34:	d9000017 	ldw	r4,0(sp)
    8b38:	183ee83a 	callr	r3
    8b3c:	a0800117 	ldw	r2,4(r20)
    8b40:	15bfbf1e 	bne	r2,r22,8a40 <_gp+0xffff78ac>
    8b44:	98800017 	ldw	r2,0(r19)
    8b48:	153fcf26 	beq	r2,r20,8a88 <_gp+0xffff78f4>
    8b4c:	003fbc06 	br	8a40 <_gp+0xffff78ac>
    8b50:	183ee83a 	callr	r3
    8b54:	003ff906 	br	8b3c <_gp+0xffff79a8>
    8b58:	a5c00115 	stw	r23,4(r20)
    8b5c:	003feb06 	br	8b0c <_gp+0xffff7978>
    8b60:	89000017 	ldw	r4,0(r17)
    8b64:	183ee83a 	callr	r3
    8b68:	003ff406 	br	8b3c <_gp+0xffff79a8>
    8b6c:	a0800017 	ldw	r2,0(r20)
    8b70:	a027883a 	mov	r19,r20
    8b74:	1029883a 	mov	r20,r2
    8b78:	003fb606 	br	8a54 <_gp+0xffff78c0>
    8b7c:	0005883a 	mov	r2,zero
    8b80:	003ffb06 	br	8b70 <_gp+0xffff79dc>

00008b84 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    8b84:	defffd04 	addi	sp,sp,-12
    8b88:	df000215 	stw	fp,8(sp)
    8b8c:	df000204 	addi	fp,sp,8
    8b90:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    8b94:	0001883a 	nop
    8b98:	e0bfff17 	ldw	r2,-4(fp)
    8b9c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    8ba0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    8ba4:	10000226 	beq	r2,zero,8bb0 <_exit+0x2c>
    ALT_SIM_FAIL();
    8ba8:	002af070 	cmpltui	zero,zero,43969
    8bac:	00000106 	br	8bb4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    8bb0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    8bb4:	003fff06 	br	8bb4 <_gp+0xffff7a20>
